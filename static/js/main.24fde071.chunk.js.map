{"version":3,"sources":["server-state/loading.tsx","server-state/error.tsx","server-state/components/motd.tsx","server-state/components/online.tsx","server-state/components/player-count.tsx","server-state/components/player-item.tsx","server-state/components/player-list.tsx","server-state/components/server-avatar.tsx","server-state/components/version.tsx","server-state/details.tsx","server-state/server.tsx","app.tsx","index.tsx"],"names":["Loading","style","textAlign","size","Error","props","status","title","subTitle","message","MotD","motd","useState","motdHtml","setMotdHtml","useEffect","motdparser","toHtml","err","res","trim","dangerouslySetInnerHTML","__html","Online","online","Title","level","CheckCircleFilled","color","CloseCircleFilled","PlayerCount","players","now","max","Text","strong","TeamOutlined","PlayerItem","player","name","id","uuid","setUuid","fetch","then","json","response","console","log","catch","error","Item","Meta","avatar","shape","src","href","target","rel","PlayerList","playerMap","Map","list","forEach","p","set","undefined","sample","playerList","Array","from","sort","a","b","localeCompare","InfoContent","width","InfoPopover","content","placement","QuestionCircleOutlined","orientation","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","defaultAvatarSrc","process","ServerAvatar","favicon","Version","server","tags","split","map","t","key","maxWidth","Details","data","flex","span","ghost","Panel","header","JSON","stringify","mergePositive","lhs","rhs","result","Object","assign","keys","item","current","value","isArray","ServerStatus","state","statusLoaded","queryLoaded","this","address","toMerge","merged","setState","statusError","queryError","length","errorMsg","filter","e","join","React","Component","Header","Layout","Footer","Content","App","params","URLSearchParams","window","location","search","paramIp","get","className","layout","initialValues","ip","onFinish","values","toString","label","type","htmlType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24fde071.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spin } from \"antd\";\n\nexport default function Loading() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h2>Loading</h2>\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Result } from \"antd\";\n\nexport type ErrorProps = {\n  message?: string;\n};\n\nexport default function Error(props: ErrorProps) {\n  return (\n    <Result\n      status=\"error\"\n      title=\"Failed to fetch server details\"\n      subTitle={props.message}\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport motdparser from \"mcmotdparser\";\n\nimport { Payload } from \"../types\";\n\ntype MotdProps = {\n  motd: Payload[\"motd\"];\n};\n\nexport const MotD: React.FunctionComponent<MotdProps> = ({ motd }) => {\n  const [motdHtml, setMotdHtml] = useState(\"\");\n  useEffect(() => {\n    motdparser.toHtml(motd, (err: any, res: any) => setMotdHtml(res));\n  }, [motd]);\n\n  if (!motd?.trim()) {\n    return null;\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: motdHtml }}></div>;\n};\n","import React from \"react\";\n\nimport { Typography } from \"antd\";\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype OnlineProps = {\n  online: Payload[\"online\"];\n};\n\nexport const Online: React.FunctionComponent<OnlineProps> = ({ online }) => {\n  if (!!online) {\n    return (\n      <Typography.Title level={3}>\n        <CheckCircleFilled style={{ color: \"green\" }} /> Online!\n      </Typography.Title>\n    );\n  }\n\n  return (\n    <Typography.Title level={3}>\n      <CloseCircleFilled style={{ color: \"darkred\" }} /> Offline\n    </Typography.Title>\n  );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { TeamOutlined } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype PlayerCountProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerCount: React.FunctionComponent<PlayerCountProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n\n  const { now, max } = players;\n  return (\n    <Typography.Text strong>\n      <TeamOutlined /> {now} / {max} player{now === 1 ? \"\" : \"s\"} online\n    </Typography.Text>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { List, Avatar } from \"antd\";\nimport { Player } from \"../types\";\n\ntype PlayerItemProps = {\n  player: Player;\n};\n\nexport const PlayerItem: React.FunctionComponent<PlayerItemProps> = ({\n  player,\n}) => {\n  const { name, id } = player;\n\n  const [uuid, setUuid] = useState(id);\n  useEffect(() => {\n    if (!name || uuid) {\n      console.log(\"UUID supplied\", { name, uuid });\n      return;\n    }\n\n    fetch(`https://api.minetools.eu/uuid/${name}`)\n      .then((res) => res.json())\n      .then((response) => {\n        console.log({ response });\n        setUuid(response.id);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, [name, uuid]);\n\n  return (\n    <List.Item.Meta\n      avatar={\n        <Avatar\n          shape=\"square\"\n          size=\"large\"\n          src={`https://crafatar.com/renders/head/${uuid}?overlay`}\n        />\n      }\n      title={\n        <a\n          href={`https://namemc.com/profile/${name}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {name}\n        </a>\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { Divider, List, Popover } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nimport { PlayerItem } from \"./player-item\";\nimport { Payload } from \"../types\";\n\ntype PlayerListProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerList: React.FunctionComponent<PlayerListProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n  const playerMap = new Map<string, string | undefined>();\n  players?.list?.forEach((p) => playerMap.set(p, undefined));\n  players?.sample?.forEach((p) => playerMap.set(p.name!, p.id!));\n\n  console.log(\"PLAYERMAP\", playerMap);\n  if (playerMap.size === 0) {\n    return null;\n  }\n\n  const playerList = Array.from(playerMap).sort((a, b) =>\n    a[0].localeCompare(b[0])\n  );\n\n  const InfoContent = (\n    <div style={{ width: \"300px\" }}>\n      <p>\n        Servers are able to control a \"sample\" of players online, and may use\n        this for extra metadata or advertisment.\n      </p>\n      <p>Occasionally, servers may also report nicknames.</p>\n    </div>\n  );\n  const InfoPopover = (\n    <Popover\n      content={InfoContent}\n      title={\"Why are there weird names sometimes?\"}\n      placement=\"topLeft\"\n    >\n      <QuestionCircleOutlined />\n    </Popover>\n  );\n\n  return (\n    <>\n      <Divider orientation=\"left\">Player List {InfoPopover}</Divider>\n      <List\n        grid={{\n          gutter: 16,\n          xs: 1,\n          sm: 2,\n          md: 3,\n          lg: 4,\n          xl: 4,\n          xxl: 5,\n        }}\n        dataSource={playerList}\n        size=\"large\"\n        renderItem={([name, id]) => (\n          <List.Item>\n            <PlayerItem player={{ name, id }} />\n          </List.Item>\n        )}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Avatar } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype ServerAvatarProps = {\n  favicon: Payload[\"favicon\"];\n};\n\nconst defaultAvatarSrc = `${process.env.PUBLIC_URL}/grassblock.jpg`;\n\nexport const ServerAvatar: React.FunctionComponent<ServerAvatarProps> = ({\n  favicon,\n}) => {\n  return <Avatar src={favicon ?? defaultAvatarSrc} size={128} shape=\"square\" />;\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype VersionProps = {\n  server: Payload[\"server\"];\n};\n\nexport const Version: React.FunctionComponent<VersionProps> = ({ server }) => {\n  if (!server || !server?.name) {\n    return null;\n  }\n\n  const tags = server.name.split(/[\\s-,]+/).map((t) => <Tag key={t}>{t}</Tag>);\n\n  return <div style={{ maxWidth: \"400px\" }}>{tags}</div>;\n};\n","import React from \"react\";\nimport { Collapse, Row, Col, Divider } from \"antd\";\nimport { Payload } from \"./types\";\nimport { MotD } from \"./components/motd\";\nimport { Online } from \"./components/online\";\nimport { PlayerCount } from \"./components/player-count\";\nimport { PlayerList } from \"./components/player-list\";\nimport { ServerAvatar } from \"./components/server-avatar\";\nimport { Version } from \"./components/version\";\n\ntype DetailsProps = {\n  data: Payload;\n};\n\nconst Details: React.FunctionComponent<DetailsProps> = ({ data }) => {\n  return (\n    <>\n      <Row gutter={[16, 16]}>\n        <Col flex=\"128px\">\n          <ServerAvatar favicon={data.favicon} />\n        </Col>\n        <Col style={{ textAlign: \"initial\" }}>\n          <Online online={data.online} />\n          <PlayerCount players={data.players} />\n          <Version server={data.server} />\n          <MotD motd={data.motd} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <PlayerList players={data.players} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Divider />\n          <Collapse ghost style={{ textAlign: \"initial\" }}>\n            <Collapse.Panel header=\"Raw Data\" key=\"1\">\n              <pre>{JSON.stringify(data, null, 2)}</pre>\n            </Collapse.Panel>\n          </Collapse>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\n\nimport Loading from \"./loading\";\nimport Error from \"./error\";\nimport Details from \"./details\";\nimport { Payload } from \"./types\";\n\nexport type ServerProps = {\n  address: string;\n};\n\nexport type ServerState = {\n  statusLoaded: boolean;\n  queryLoaded: boolean;\n  statusError?: Error;\n  queryError?: Error;\n  data?: Payload;\n};\n\nconst isObject = (item: any) => {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n};\n\nconst mergePositive = (lhs: any, rhs: any) => {\n  const result = Object.assign({}, lhs);\n\n  Object.keys(rhs).forEach((key) => {\n    const current = result[key];\n    const value = rhs[key];\n\n    if (isObject(value)) {\n      result[key] = mergePositive(current, value);\n      return;\n    }\n\n    if (!current) {\n      result[key] = value;\n      return;\n    }\n  });\n\n  return result;\n};\n\nexport class ServerStatus extends React.Component<ServerProps, ServerState> {\n  constructor(props: ServerProps) {\n    super(props);\n    this.state = { statusLoaded: false, queryLoaded: false };\n  }\n\n  componentDidMount() {\n    fetch(`https://mcapi.us/server/status?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, statusLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ statusError: error, statusLoaded: true });\n        console.error(error);\n      });\n\n    fetch(`https://mcapi.us/server/query?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, queryLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ queryError: error });\n        console.error(error);\n      });\n  }\n\n  render() {\n    const {\n      statusError,\n      queryError,\n      data,\n      statusLoaded,\n      queryLoaded,\n    } = this.state;\n\n    if (!statusLoaded && !queryLoaded) {\n      return <Loading />;\n    }\n\n    if (!data || Object.keys(data).length === 0) {\n      if (statusLoaded && queryLoaded) {\n        const errorMsg = [statusError, queryError].filter((e) => e).join(\"/\");\n        return <Error message={errorMsg} />;\n      } else {\n        return <Loading />;\n      }\n    }\n\n    if (data.error || data.status === \"error\") {\n      if (statusLoaded && queryLoaded) {\n        return <Error message={data ? data.error : \"No data found??\"} />;\n      }\n    }\n    return <Details data={data} key={JSON.stringify(data)} />;\n  }\n}\n","import React from \"react\";\nimport { ServerStatus } from \"./server-state/server\";\nimport { Typography, Button, Layout, Form, Input, Divider } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  const params = new URLSearchParams(window.location.search);\n  const paramIp = params.get(\"ip\");\n\n  const onFinish = (values: { ip?: string }) => {\n    if (values.ip) {\n      params.set(\"ip\", values.ip);\n      window.location.search = params.toString();\n    }\n  };\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"layout-header\">\n        <Typography.Title>Minecraft Server Status</Typography.Title>\n      </Header>\n      <Content className=\"layout-content\">\n        <Form\n          style={{ textAlign: \"center\" }}\n          name=\"basic\"\n          layout=\"vertical\"\n          size=\"large\"\n          initialValues={{ ip: paramIp }}\n          onFinish={onFinish}\n        >\n          <Form.Item label=\"Server IP:\" name=\"ip\">\n            <Input />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Go!\n            </Button>\n          </Form.Item>\n        </Form>\n        <Divider />\n        {paramIp && <ServerStatus key={paramIp} address={paramIp} />}\n      </Content>\n      <Footer className=\"layout-footer\">\n        Created by <a href=\"https://github.com/Samuel-Lewis\">Samuel Lewis</a> |{\" \"}\n        Avatars by <a href=\"https://crafatar.com\">Crafatar</a>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}