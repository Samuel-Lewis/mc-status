{"version":3,"sources":["server-list/detailed-list.tsx","server-list/local-servers.ts","server-list/index.tsx","server-state/loading.tsx","server-state/error.tsx","server-state/components/motd.tsx","server-state/components/online.tsx","server-state/components/player-count.tsx","server-state/components/player-item.tsx","server-state/components/player-list.tsx","server-state/components/server-avatar.tsx","server-state/components/version.tsx","server-state/details.tsx","server-state/index.tsx","app.tsx","index.tsx"],"names":["Item","List","Title","Typography","DetailedList","servers","title","length","toParam","url","fullUrl","URL","window","location","href","searchParams","append","level","bordered","itemLayout","dataSource","size","renderItem","item","Meta","name","description","searchStore","localforage","createInstance","getLocalServers","a","keys","Promise","all","map","key","getItem","history","entries","popularServers","ServerList","useState","localServers","setLocalServers","useEffect","then","Loading","style","textAlign","Error","props","status","subTitle","message","MotD","motd","motdHtml","setMotdHtml","motdparser","toHtml","err","res","trim","dangerouslySetInnerHTML","__html","Online","online","CheckCircleFilled","color","CloseCircleFilled","PlayerCount","players","now","max","Text","strong","TeamOutlined","PlayerItem","player","id","uuid","setUuid","fetch","json","response","console","log","catch","error","avatar","shape","src","target","rel","PlayerList","playerMap","Map","list","forEach","p","set","undefined","sample","playerList","Array","from","sort","b","localeCompare","InfoContent","width","InfoPopover","content","placement","QuestionCircleOutlined","orientation","grid","gutter","xs","sm","md","lg","xl","xxl","defaultAvatarSrc","process","ServerAvatar","favicon","Version","server","tags","split","t","maxWidth","Details","data","flex","span","ghost","Panel","header","JSON","stringify","mergePositive","lhs","rhs","result","Object","assign","current","value","isArray","ServerStatus","state","statusLoaded","queryLoaded","this","address","toMerge","merged","setState","statusError","queryError","errorMsg","filter","e","join","React","Component","Header","Layout","Footer","Content","App","params","URLSearchParams","search","paramIp","get","className","alt","layout","initialValues","ip","onFinish","values","toString","label","type","htmlType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.747ba38a.chunk.js","sourcesContent":["import {\r\n    List,\r\n    Typography\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport { SearchEntry } from \"./types\";\r\n\r\nconst { Item } = List;\r\nconst { Title } = Typography;\r\n\r\nexport type DetailedListProps = {\r\n  servers: SearchEntry[];\r\n  title: string;\r\n};\r\n\r\nexport const DetailedList: React.FunctionComponent<DetailedListProps> = ({\r\n  servers,\r\n  title,\r\n}) => {\r\n  if (servers.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const toParam = (url: string) => {\r\n    const fullUrl = new URL(window.location.href);\r\n    fullUrl.searchParams.append(\"ip\", url);\r\n    return fullUrl.href;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Title level={3}>{title}</Title>\r\n      <List\r\n        bordered\r\n        itemLayout=\"vertical\"\r\n        dataSource={servers}\r\n        size=\"large\"\r\n        renderItem={(item) => (\r\n          <Item>\r\n            <Item.Meta\r\n              title={<a href={toParam(item.url)}>{item.name}</a>}\r\n              description={item.url}\r\n            />\r\n          </Item>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import localforage from \"localforage\";\r\nimport {\r\n    isSearchEntry,\r\n    SearchEntry\r\n} from \"./types\";\r\n\r\nconst searchStore = localforage.createInstance({\r\n  name: \"server-searches\",\r\n});\r\n\r\nexport const addSearch = async ({ name, url }: SearchEntry) => {\r\n  const entry = await localforage.getItem(url);\r\n\r\n  if (entry === null || !isSearchEntry(entry)) {\r\n    return await searchStore.setItem(url, {\r\n      name,\r\n      url,\r\n      lastAccess: Date.now(),\r\n      totalHits: 1,\r\n    });\r\n  }\r\n\r\n  const newEntry = {\r\n    ...entry,\r\n    totalHits: (entry.totalHits || 0) + 1,\r\n    lastAccess: Date.now(),\r\n    name,\r\n  };\r\n  return await searchStore.setItem(url, newEntry);\r\n};\r\n\r\nexport const getLocalServers = async (): Promise<SearchEntry[]> => {\r\n  const keys = await searchStore.keys();\r\n  const entries = await Promise.all(\r\n    keys.map(async (key) => {\r\n      const history = await searchStore.getItem(key);\r\n      return history as SearchEntry;\r\n    })\r\n  );\r\n  return entries;\r\n};\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { DetailedList } from \"./detailed-list\";\r\nimport { getLocalServers } from \"./local-servers\";\r\nimport { SearchEntry } from \"./types\";\r\n\r\nconst popularServers = [\r\n  { name: \"Hypixel\", url: \"mc.hypixel.net\" },\r\n  { name: \"2b2t\", url: \"2b2t.org\" },\r\n  { name: \"MineTower\", url: \"minetower.serv.gs\" },\r\n  { name: \"HiveMC\", url: \"hivemc.com\" },\r\n];\r\n\r\nexport const ServerList = () => {\r\n  const [localServers, setLocalServers] = useState<SearchEntry[]>([]);\r\n\r\n  useEffect(() => {\r\n    getLocalServers().then((servers) => setLocalServers(servers));\r\n  }, [setLocalServers]);\r\n\r\n  return (\r\n    <>\r\n      <DetailedList title=\"Popular servers\" servers={popularServers} />\r\n      <DetailedList title=\"Recent servers\" servers={localServers} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nexport default function Loading() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h2>Loading</h2>\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Result } from \"antd\";\n\nexport type ErrorProps = {\n  message?: string;\n};\n\nexport default function Error(props: ErrorProps) {\n  return (\n    <Result\n      status=\"error\"\n      title=\"Failed to fetch server details\"\n      subTitle={props.message}\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport motdparser from \"mcmotdparser\";\n\nimport { Payload } from \"../types\";\n\ntype MotdProps = {\n  motd: Payload[\"motd\"];\n};\n\nexport const MotD: React.FunctionComponent<MotdProps> = ({ motd }) => {\n  const [motdHtml, setMotdHtml] = useState(\"\");\n  useEffect(() => {\n    motdparser.toHtml(motd, (err: any, res: any) => setMotdHtml(res));\n  }, [motd]);\n\n  if (!motd?.trim()) {\n    return null;\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: motdHtml }}></div>;\n};\n","import React from \"react\";\n\nimport { Typography } from \"antd\";\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype OnlineProps = {\n  online: Payload[\"online\"];\n};\n\nexport const Online: React.FunctionComponent<OnlineProps> = ({ online }) => {\n  if (!!online) {\n    return (\n      <Typography.Title level={3}>\n        <CheckCircleFilled style={{ color: \"green\" }} /> Online!\n      </Typography.Title>\n    );\n  }\n\n  return (\n    <Typography.Title level={3}>\n      <CloseCircleFilled style={{ color: \"darkred\" }} /> Offline\n    </Typography.Title>\n  );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { TeamOutlined } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype PlayerCountProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerCount: React.FunctionComponent<PlayerCountProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n\n  const { now, max } = players;\n  return (\n    <Typography.Text strong>\n      <TeamOutlined /> {now} / {max} player{now === 1 ? \"\" : \"s\"} online\n    </Typography.Text>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { List, Avatar } from \"antd\";\nimport { Player } from \"../types\";\n\ntype PlayerItemProps = {\n  player: Player;\n};\n\nexport const PlayerItem: React.FunctionComponent<PlayerItemProps> = ({\n  player,\n}) => {\n  const { name, id } = player;\n\n  const [uuid, setUuid] = useState(id);\n  useEffect(() => {\n    if (!name || uuid) {\n      console.log(\"UUID supplied\", { name, uuid });\n      return;\n    }\n\n    fetch(`https://api.minetools.eu/uuid/${name}`)\n      .then((res) => res.json())\n      .then((response) => {\n        console.log({ response });\n        setUuid(response.id);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, [name, uuid]);\n\n  return (\n    <List.Item.Meta\n      avatar={\n        <Avatar\n          shape=\"square\"\n          size=\"large\"\n          src={`https://crafatar.com/renders/head/${uuid}?overlay`}\n        />\n      }\n      title={\n        <a\n          href={`https://namemc.com/profile/${name}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {name}\n        </a>\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { Divider, List, Popover } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nimport { PlayerItem } from \"./player-item\";\nimport { Payload } from \"../types\";\n\ntype PlayerListProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerList: React.FunctionComponent<PlayerListProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n  const playerMap = new Map<string, string | undefined>();\n  players?.list?.forEach((p) => playerMap.set(p, undefined));\n  players?.sample?.forEach((p) => playerMap.set(p.name!, p.id!));\n\n  console.log(\"PLAYERMAP\", playerMap);\n  if (playerMap.size === 0) {\n    return null;\n  }\n\n  const playerList = Array.from(playerMap).sort((a, b) =>\n    a[0].localeCompare(b[0])\n  );\n\n  const InfoContent = (\n    <div style={{ width: \"300px\" }}>\n      <p>\n        Servers are able to control a \"sample\" of players online, and may use\n        this for extra metadata or advertisment.\n      </p>\n      <p>Occasionally, servers may also report nicknames.</p>\n    </div>\n  );\n  const InfoPopover = (\n    <Popover\n      content={InfoContent}\n      title={\"Why are there weird names sometimes?\"}\n      placement=\"topLeft\"\n    >\n      <QuestionCircleOutlined />\n    </Popover>\n  );\n\n  return (\n    <>\n      <Divider orientation=\"left\">Player List {InfoPopover}</Divider>\n      <List\n        grid={{\n          gutter: 16,\n          xs: 1,\n          sm: 2,\n          md: 3,\n          lg: 4,\n          xl: 4,\n          xxl: 5,\n        }}\n        dataSource={playerList}\n        size=\"large\"\n        renderItem={([name, id]) => (\n          <List.Item>\n            <PlayerItem player={{ name, id }} />\n          </List.Item>\n        )}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Avatar } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype ServerAvatarProps = {\n  favicon: Payload[\"favicon\"];\n};\n\nconst defaultAvatarSrc = `${process.env.PUBLIC_URL}/grassblock.jpg`;\n\nexport const ServerAvatar: React.FunctionComponent<ServerAvatarProps> = ({\n  favicon,\n}) => {\n  return <Avatar src={favicon ?? defaultAvatarSrc} size={128} shape=\"square\" />;\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype VersionProps = {\n  server: Payload[\"server\"];\n};\n\nexport const Version: React.FunctionComponent<VersionProps> = ({ server }) => {\n  if (!server || !server?.name) {\n    return null;\n  }\n\n  const tags = server.name.split(/[\\s-,]+/).map((t) => <Tag key={t}>{t}</Tag>);\n\n  return <div style={{ maxWidth: \"400px\" }}>{tags}</div>;\n};\n","import React from \"react\";\nimport { Collapse, Row, Col, Divider } from \"antd\";\nimport { Payload } from \"./types\";\nimport { MotD } from \"./components/motd\";\nimport { Online } from \"./components/online\";\nimport { PlayerCount } from \"./components/player-count\";\nimport { PlayerList } from \"./components/player-list\";\nimport { ServerAvatar } from \"./components/server-avatar\";\nimport { Version } from \"./components/version\";\n\ntype DetailsProps = {\n  data: Payload;\n};\n\nconst Details: React.FunctionComponent<DetailsProps> = ({ data }) => {\n  return (\n    <>\n      <Row gutter={[16, 16]}>\n        <Col flex=\"128px\">\n          <ServerAvatar favicon={data.favicon} />\n        </Col>\n        <Col style={{ textAlign: \"initial\" }}>\n          <Online online={data.online} />\n          <PlayerCount players={data.players} />\n          <Version server={data.server} />\n          <MotD motd={data.motd} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <PlayerList players={data.players} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Divider />\n          <Collapse ghost style={{ textAlign: \"initial\" }}>\n            <Collapse.Panel header=\"Raw Data\" key=\"1\">\n              <pre>{JSON.stringify(data, null, 2)}</pre>\n            </Collapse.Panel>\n          </Collapse>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\n\nimport Loading from \"./loading\";\nimport Error from \"./error\";\nimport Details from \"./details\";\nimport { Payload } from \"./types\";\n\nexport type ServerProps = {\n  address: string;\n};\n\nexport type ServerState = {\n  statusLoaded: boolean;\n  queryLoaded: boolean;\n  statusError?: Error;\n  queryError?: Error;\n  data?: Payload;\n};\n\nconst isObject = (item: any) => {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n};\n\nconst mergePositive = (lhs: any, rhs: any) => {\n  const result = Object.assign({}, lhs);\n\n  Object.keys(rhs).forEach((key) => {\n    const current = result[key];\n    const value = rhs[key];\n\n    if (isObject(value)) {\n      result[key] = mergePositive(current, value);\n      return;\n    }\n\n    if (!current) {\n      result[key] = value;\n      return;\n    }\n  });\n\n  return result;\n};\n\nexport class ServerStatus extends React.Component<ServerProps, ServerState> {\n  constructor(props: ServerProps) {\n    super(props);\n    this.state = { statusLoaded: false, queryLoaded: false };\n  }\n\n  componentDidMount() {\n    fetch(`https://mcapi.us/server/status?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, statusLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ statusError: error, statusLoaded: true });\n        console.error(error);\n      });\n\n    fetch(`https://mcapi.us/server/query?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, queryLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ queryError: error });\n        console.error(error);\n      });\n  }\n\n  render() {\n    const {\n      statusError,\n      queryError,\n      data,\n      statusLoaded,\n      queryLoaded,\n    } = this.state;\n\n    if (!statusLoaded && !queryLoaded) {\n      return <Loading />;\n    }\n\n    if (!data || Object.keys(data).length === 0) {\n      if (statusLoaded && queryLoaded) {\n        const errorMsg = [statusError, queryError].filter((e) => e).join(\"/\");\n        return <Error message={errorMsg} />;\n      } else {\n        return <Loading />;\n      }\n    }\n\n    if (data.error || data.status === \"error\") {\n      if (statusLoaded && queryLoaded) {\n        return <Error message={data ? data.error : \"No data found??\"} />;\n      }\n    }\n    return <Details data={data} key={JSON.stringify(data)} />;\n  }\n}\n","import \"antd/dist/antd.css\";\nimport \"./App.less\";\nimport {\n    Button,\n    Divider,\n    Form,\n    Input,\n    Layout\n} from \"antd\";\nimport React from \"react\";\nimport { ServerList } from \"./server-list\";\nimport { ServerStatus } from \"./server-state\";\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  const params = new URLSearchParams(window.location.search);\n  const paramIp = params.get(\"ip\");\n\n  const onFinish = (values: { ip?: string }) => {\n    if (values.ip) {\n      params.set(\"ip\", values.ip);\n      window.location.search = params.toString();\n    }\n  };\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"layout-header\">\n        <h2 className=\"layout-header\">\n          <img\n            className=\"logo\"\n            src={`${process.env.PUBLIC_URL}/logo512.png`}\n            alt=\"computer logo\"\n          ></img>\n          Minecraft Server Status\n        </h2>\n      </Header>\n      <Content className=\"layout-content\">\n        <Form\n          style={{ textAlign: \"center\" }}\n          name=\"basic\"\n          layout=\"vertical\"\n          size=\"large\"\n          initialValues={{ ip: paramIp }}\n          onFinish={onFinish}\n        >\n          <Form.Item label=\"Server IP:\" name=\"ip\">\n            <Input />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Go!\n            </Button>\n          </Form.Item>\n        </Form>\n        <Divider />\n        {!paramIp && <ServerList />}\n        {paramIp && <ServerStatus key={paramIp} address={paramIp} />}\n      </Content>\n      <Footer className=\"layout-footer\">\n        Created by <a href=\"https://github.com/Samuel-Lewis\">Samuel Lewis</a> |{\" \"}\n        Avatars by <a href=\"https://crafatar.com\">Crafatar</a>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}