{"version":3,"sources":["info-links/modal-screen.tsx","info-links/index.tsx","server-list/detailed-list.tsx","server-list/local-servers.ts","server-list/types.ts","server-list/index.tsx","server-state/components/motd.tsx","server-state/components/online.tsx","server-state/components/player-count.tsx","server-state/components/player-item.tsx","server-state/components/player-list.tsx","server-state/components/server-avatar.tsx","server-state/components/version.tsx","server-state/details.tsx","server-state/error.tsx","server-state/loading.tsx","server-state/index.tsx","app.tsx","index.tsx"],"names":["ModalScreen","title","children","useState","isModalVisible","setIsModalVisible","closeModal","ReactGA","event","category","action","label","toLowerCase","type","onClick","visible","onOk","onCancel","footer","P","Typography","Paragraph","T","Text","Link","Title","About","href","FAQ","level","code","InfoLinks","Item","List","DetailedList","servers","onDelete","length","toParam","url","fullUrl","URL","window","location","searchParams","append","deleteButton","item","shape","icon","CloseOutlined","style","color","itemLayout","dataSource","size","renderItem","actions","Meta","description","name","searchStore","localforage","createInstance","addSearch","a","getItem","entry","obj","lastAccess","totalHits","setItem","Date","now","newEntry","removeSearch","removeItem","getLocalServers","keys","Promise","all","map","key","history","entries","sort","b","slice","popularServers","ServerList","localServers","setLocalServers","useCallback","then","useEffect","gutter","span","flex","MotD","motd","motdHtml","setMotdHtml","motdparser","toHtml","err","res","trim","dangerouslySetInnerHTML","__html","Online","online","CheckCircleFilled","CloseCircleFilled","PlayerCount","players","max","strong","TeamOutlined","PlayerItem","player","id","uuid","setUuid","fetch","json","response","catch","console","error","avatar","src","target","rel","PlayerList","playerMap","Map","list","forEach","p","set","undefined","sample","playerList","Array","from","localeCompare","InfoContent","width","InfoPopover","content","placement","QuestionCircleOutlined","orientation","grid","xs","sm","md","lg","xl","xxl","defaultAvatarSrc","process","ServerAvatar","favicon","Version","server","tags","split","t","maxWidth","Details","data","textAlign","ghost","Panel","header","JSON","stringify","Error","props","status","subTitle","message","Loading","mergePositive","lhs","rhs","result","Object","assign","current","value","isArray","ServerStatus","state","statusLoaded","queryLoaded","this","address","toMerge","merged","setState","statusError","queryError","errorMsg","filter","e","join","React","Component","Header","Layout","Footer","Content","initialize","App","params","URLSearchParams","search","paramIp","get","className","alt","layout","initialValues","ip","onFinish","values","toString","prefix","GlobalOutlined","placeholder","htmlType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1774159.chunk.js","sourcesContent":["import {\r\n    Button,\r\n    Modal\r\n} from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport ReactGA from \"react-ga4\";\r\n\r\ntype ModalScreenProps = {\r\n  title: string;\r\n};\r\n\r\nexport const ModalScreen: React.FunctionComponent<ModalScreenProps> = ({\r\n  title,\r\n  children,\r\n}) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = () => {\r\n    ReactGA.event({\r\n      category: \"modal\",\r\n      action: \"open\",\r\n      label: title.toLowerCase(), // optional\r\n    });\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    ReactGA.event({\r\n      category: \"modal\",\r\n      action: \"close\",\r\n      label: title.toLowerCase(), // optional\r\n    });\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"link\" onClick={showModal}>\r\n        {title}\r\n      </Button>\r\n      <Modal\r\n        title={title}\r\n        visible={isModalVisible}\r\n        onOk={closeModal}\r\n        onCancel={closeModal}\r\n        footer={\r\n          <Button key=\"Ok\" type=\"primary\" onClick={closeModal}>\r\n            Ok\r\n          </Button>\r\n        }\r\n      >\r\n        {children}\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { ModalScreen } from \"./modal-screen\";\r\n\r\nconst { Paragraph: P, Text: T, Link, Title } = Typography;\r\n\r\nconst About = () => (\r\n  <>\r\n    <P>\r\n      This site is an ad-free, lightweight way to check the status of your\r\n      favourite Minecraft server.\r\n    </P>\r\n    <P>Currently, the site only supports Java servers.</P>\r\n    <P>\r\n      This site is basically always under development, as I use it for a\r\n      platform for learning web development. If there are any questions,\r\n      suggestions, feedback or bugs, you can raise an{\" \"}\r\n      <Link href=\"https://github.com/Samuel-Lewis/mc-status/issues\">\r\n        issue on the GitHub repo\r\n      </Link>\r\n      .\r\n    </P>\r\n    <P>\r\n      Created using\r\n      <ul>\r\n        <li>\r\n          API queries by <Link href=\"https://mcapi.us/\">MC API</Link>\r\n        </li>\r\n        <li>\r\n          Player information by{\" \"}\r\n          <Link href=\"https://api.minetools.eu/\">MineTools</Link> and{\" \"}\r\n          <Link href=\"https://namemc.com/\">NameMC</Link>\r\n        </li>\r\n        <li>\r\n          Avatars by <Link href=\"https://crafatar.com\">Crafatar</Link>\r\n        </li>\r\n        <li>\r\n          <Link href=\"https://reactjs.org/\">React</Link> and{\" \"}\r\n          <Link href=\"https://ant.design/\">Ant Design</Link>\r\n        </li>\r\n      </ul>\r\n    </P>\r\n  </>\r\n);\r\n\r\nconst FAQ = () => (\r\n  <>\r\n    <Title level={4}>Why is my server not showing up?</Title>\r\n    <P>\r\n      There are a few reasons your server may not be showing up\r\n      <ol>\r\n        <li>The server maybe offline</li>\r\n        <li>\r\n          The server <T code>enable-status</T> may be set to <T code>false</T>\r\n        </li>\r\n        <li>\r\n          There is a bug in my code 😞. You can raise an{\" \"}\r\n          <Link href=\"https://github.com/Samuel-Lewis/mc-status/issues\">\r\n            issue on the GitHub repo\r\n          </Link>\r\n          .\r\n        </li>\r\n      </ol>\r\n    </P>\r\n    <Title level={4}>\r\n      How come some servers show more details than others?\r\n    </Title>\r\n    <P>\r\n      Ultimately, servers can show as much or as little as they want. If you\r\n      want to show more detailed information on your server, set{\" \"}\r\n      <T code>enable-status</T> and <T code>enable-query</T> to <T code>true</T>{\" \"}\r\n      in your <T code>server.properties</T>. Remember though, this is\r\n      information shared to the public. Check that there is nothing\r\n      unintentional being exposed or that you have measures to protect your\r\n      server if needed.\r\n    </P>\r\n    <Title level={4}>\r\n      Why do some player lists look weird, incomplete, or empty?\r\n    </Title>\r\n    <P>\r\n      As above, servers can show what they like. Some servers take the\r\n      opportunity to show ads, extra server information, a subset of players, or\r\n      maybe, no players at all. As of Minecraft 1.18, players are able to\r\n      opt-out of server queries, and hence will not be shown in the player list.\r\n    </P>\r\n    <Title level={4}>How do I donate or contribute?</Title>\r\n    <P>\r\n      This website costs me zero dollars per year to run as it relies on\r\n      existing free services. While it's a kind notion, you hang on to it for a\r\n      rainy day 😉. If you really want to contribute, the code is open-source on{\" \"}\r\n      <Link href=\"https://github.com/Samuel-Lewis/mc-status\">GitHub</Link>.\r\n    </P>\r\n  </>\r\n);\r\n\r\nexport const InfoLinks: React.FunctionComponent = () => {\r\n  return (\r\n    <>\r\n      <ModalScreen title={\"About\"}>\r\n        <About />\r\n      </ModalScreen>\r\n      |\r\n      <ModalScreen title={\"FAQ\"}>\r\n        <FAQ />\r\n      </ModalScreen>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n    Button,\r\n    List,\r\n    Tooltip,\r\n    Typography\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport { SearchEntry } from \"./types\";\r\n\r\nconst { Item } = List;\r\nconst { Title } = Typography;\r\n\r\nexport type DetailedListProps = {\r\n  servers: SearchEntry[];\r\n  title: string;\r\n  onDelete?: (server: SearchEntry) => void;\r\n};\r\n\r\nexport const DetailedList: React.FunctionComponent<DetailedListProps> = ({\r\n  servers,\r\n  title,\r\n  onDelete,\r\n}) => {\r\n  if (servers.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const toParam = (url: string) => {\r\n    const fullUrl = new URL(window.location.href);\r\n    fullUrl.searchParams.append(\"ip\", url);\r\n    return fullUrl.href;\r\n  };\r\n\r\n  const deleteButton = (item: SearchEntry) =>\r\n    onDelete ? (\r\n      <Tooltip title=\"Remove server\">\r\n        <Button\r\n          shape=\"circle\"\r\n          type=\"text\"\r\n          icon={<CloseOutlined style={{ color: \"rgba(0, 0, 0, 0.45)\" }} />}\r\n          onClick={() => onDelete(item)}\r\n        />\r\n      </Tooltip>\r\n    ) : null;\r\n\r\n  return (\r\n    <>\r\n      <Title level={3}>{title}</Title>\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={servers}\r\n        size=\"large\"\r\n        renderItem={(item) => (\r\n          <Item actions={[deleteButton(item)]}>\r\n            <Item.Meta\r\n              title={<a href={toParam(item.url)}>{item.url}</a>}\r\n              description={item.name}\r\n            />\r\n          </Item>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import localforage from \"localforage\";\r\nimport {\r\n    isSearchEntry,\r\n    SearchEntry\r\n} from \"./types\";\r\n\r\nconst searchStore = localforage.createInstance({\r\n  name: \"server-searches\",\r\n});\r\n\r\nexport const addSearch = async ({ name, url }: SearchEntry) => {\r\n  const entry = await localforage.getItem(url);\r\n\r\n  if (entry === null || !isSearchEntry(entry)) {\r\n    return await searchStore.setItem(url, {\r\n      name,\r\n      url,\r\n      lastAccess: Date.now(),\r\n      totalHits: 1,\r\n    });\r\n  }\r\n\r\n  const newEntry = {\r\n    ...entry,\r\n    totalHits: (entry.totalHits || 0) + 1,\r\n    lastAccess: Date.now(),\r\n    name,\r\n  };\r\n  return await searchStore.setItem(url, newEntry);\r\n};\r\n\r\nexport const removeSearch = async (url: string) => {\r\n  return await searchStore.removeItem(url);\r\n};\r\n\r\nconst sortSearches = (searches: SearchEntry[]): SearchEntry[] => {\r\n  return searches\r\n    .sort((a, b) => {\r\n      if (a.totalHits === b.totalHits) {\r\n        return 0;\r\n      }\r\n      return (a.totalHits || 0) < (b.totalHits || 0) ? 1 : -1;\r\n    })\r\n    .slice(0, 4);\r\n};\r\n\r\nexport const getLocalServers = async (): Promise<SearchEntry[]> => {\r\n  const keys = await searchStore.keys();\r\n  const entries = await Promise.all(\r\n    keys.map(async (key) => {\r\n      const history = await searchStore.getItem(key);\r\n      return history as SearchEntry;\r\n    })\r\n  );\r\n  return sortSearches(entries);\r\n};\r\n","export type SearchEntry = {\r\n  name: string;\r\n  url: string;\r\n  lastAccess?: number;\r\n  totalHits?: number;\r\n};\r\n\r\nexport function isSearchEntry(obj: any): obj is SearchEntry {\r\n  return (\r\n    obj &&\r\n    typeof obj === \"object\" &&\r\n    typeof obj.name === \"string\" &&\r\n    typeof obj.url === \"string\" &&\r\n    (typeof obj.lastAccess === \"undefined\" ||\r\n      typeof obj.lastAccess === \"number\") &&\r\n    (typeof obj.totalHits === \"undefined\" || typeof obj.totalHits === \"number\")\r\n  );\r\n}\r\n","import {\r\n    Col,\r\n    Row\r\n} from \"antd\";\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { DetailedList } from \"./detailed-list\";\r\nimport {\r\n    getLocalServers,\r\n    removeSearch\r\n} from \"./local-servers\";\r\nimport { SearchEntry } from \"./types\";\r\n\r\nconst popularServers = [\r\n  { name: \"Hypixel\", url: \"mc.hypixel.net\" },\r\n  { name: \"2b2t\", url: \"2b2t.org\" },\r\n  { name: \"Mineplex (US)\", url: \"us.mineplex.com\" },\r\n  { name: \"MineTower\", url: \"minetower.serv.gs\" },\r\n];\r\n\r\nexport const ServerList = () => {\r\n  const [localServers, setLocalServers] = useState<SearchEntry[]>([]);\r\n  const onDelete = useCallback(\r\n    (item: SearchEntry) => {\r\n      removeSearch(item.url).then(() => {\r\n        getLocalServers().then((servers) => setLocalServers(servers));\r\n      });\r\n    },\r\n    [setLocalServers]\r\n  );\r\n\r\n  useEffect(() => {\r\n    getLocalServers().then((servers) => setLocalServers(servers));\r\n  }, [setLocalServers]);\r\n\r\n  return (\r\n    <Row gutter={16}>\r\n      <Col span={12} flex=\"auto\">\r\n        <DetailedList title=\"Popular servers\" servers={popularServers} />\r\n      </Col>\r\n      <Col span={12} flex=\"auto\">\r\n        <DetailedList\r\n          title=\"Recent servers\"\r\n          servers={localServers}\r\n          onDelete={onDelete}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport motdparser from \"mcmotdparser\";\n\nimport { Payload } from \"../types\";\n\ntype MotdProps = {\n  motd: Payload[\"motd\"];\n};\n\nexport const MotD: React.FunctionComponent<MotdProps> = ({ motd }) => {\n  const [motdHtml, setMotdHtml] = useState(\"\");\n  useEffect(() => {\n    motdparser.toHtml(motd, (err: any, res: any) => setMotdHtml(res));\n  }, [motd]);\n\n  if (!motd?.trim()) {\n    return null;\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: motdHtml }}></div>;\n};\n","import React from \"react\";\n\nimport { Typography } from \"antd\";\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype OnlineProps = {\n  online: Payload[\"online\"];\n};\n\nexport const Online: React.FunctionComponent<OnlineProps> = ({ online }) => {\n  if (!!online) {\n    return (\n      <Typography.Title level={3}>\n        <CheckCircleFilled style={{ color: \"green\" }} /> Online!\n      </Typography.Title>\n    );\n  }\n\n  return (\n    <Typography.Title level={3}>\n      <CloseCircleFilled style={{ color: \"darkred\" }} /> Offline\n    </Typography.Title>\n  );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { TeamOutlined } from \"@ant-design/icons\";\n\nimport { Payload } from \"../types\";\n\ntype PlayerCountProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerCount: React.FunctionComponent<PlayerCountProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n\n  const { now, max } = players;\n  return (\n    <Typography.Text strong>\n      <TeamOutlined /> {now} / {max} player{now === 1 ? \"\" : \"s\"} online\n    </Typography.Text>\n  );\n};\n","import {\n    Avatar,\n    List\n} from \"antd\";\nimport React, {\n    useEffect,\n    useState\n} from \"react\";\nimport { Player } from \"../types\";\n\ntype PlayerItemProps = {\n  player: Player;\n};\n\nexport const PlayerItem: React.FunctionComponent<PlayerItemProps> = ({\n  player,\n}) => {\n  const { name, id } = player;\n\n  const [uuid, setUuid] = useState(id);\n  useEffect(() => {\n    if (!name || uuid) {\n      return;\n    }\n\n    fetch(`https://api.minetools.eu/uuid/${name}`)\n      .then((res) => res.json())\n      .then((response) => {\n        setUuid(response.id);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, [name, uuid]);\n\n  return (\n    <List.Item.Meta\n      avatar={\n        <Avatar\n          shape=\"square\"\n          size=\"large\"\n          src={`https://crafatar.com/renders/head/${uuid}?overlay`}\n        />\n      }\n      title={\n        <a\n          href={`https://namemc.com/profile/${name}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {name}\n        </a>\n      }\n    />\n  );\n};\n","import {\n    Divider,\n    List,\n    Popover\n} from \"antd\";\nimport React from \"react\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { Payload } from \"../types\";\nimport { PlayerItem } from \"./player-item\";\n\ntype PlayerListProps = {\n  players: Payload[\"players\"];\n};\n\nexport const PlayerList: React.FunctionComponent<PlayerListProps> = ({\n  players,\n}) => {\n  if (!players) {\n    return null;\n  }\n  const playerMap = new Map<string, string | undefined>();\n  players?.list?.forEach((p) => playerMap.set(p, undefined));\n  players?.sample?.forEach((p) => playerMap.set(p.name!, p.id!));\n\n  if (playerMap.size === 0) {\n    return null;\n  }\n\n  const playerList = Array.from(playerMap).sort((a, b) =>\n    a[0].localeCompare(b[0])\n  );\n\n  const InfoContent = (\n    <div style={{ width: \"300px\" }}>\n      <p>\n        Servers are able to control a \"sample\" of players online, and may use\n        this for extra metadata or advertisment.\n      </p>\n      <p>Occasionally, servers may also report nicknames.</p>\n    </div>\n  );\n  const InfoPopover = (\n    <Popover\n      content={InfoContent}\n      title={\"Why are there weird names sometimes?\"}\n      placement=\"topLeft\"\n    >\n      <QuestionCircleOutlined />\n    </Popover>\n  );\n\n  return (\n    <>\n      <Divider orientation=\"left\">Player List {InfoPopover}</Divider>\n      <List\n        grid={{\n          gutter: 16,\n          xs: 1,\n          sm: 2,\n          md: 3,\n          lg: 4,\n          xl: 4,\n          xxl: 5,\n        }}\n        dataSource={playerList}\n        size=\"large\"\n        renderItem={([name, id]) => (\n          <List.Item>\n            <PlayerItem player={{ name, id }} />\n          </List.Item>\n        )}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Avatar } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype ServerAvatarProps = {\n  favicon: Payload[\"favicon\"];\n};\n\nconst defaultAvatarSrc = `${process.env.PUBLIC_URL}/grassblock.jpg`;\n\nexport const ServerAvatar: React.FunctionComponent<ServerAvatarProps> = ({\n  favicon,\n}) => {\n  return <Avatar src={favicon ?? defaultAvatarSrc} size={128} shape=\"square\" />;\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nimport { Payload } from \"../types\";\n\ntype VersionProps = {\n  server: Payload[\"server\"];\n};\n\nexport const Version: React.FunctionComponent<VersionProps> = ({ server }) => {\n  if (!server || !server?.name) {\n    return null;\n  }\n\n  const tags = server.name.split(/[\\s-,]+/).map((t) => <Tag key={t}>{t}</Tag>);\n\n  return <div style={{ maxWidth: \"400px\" }}>{tags}</div>;\n};\n","import React from \"react\";\nimport { Collapse, Row, Col, Divider } from \"antd\";\nimport { Payload } from \"./types\";\nimport { MotD } from \"./components/motd\";\nimport { Online } from \"./components/online\";\nimport { PlayerCount } from \"./components/player-count\";\nimport { PlayerList } from \"./components/player-list\";\nimport { ServerAvatar } from \"./components/server-avatar\";\nimport { Version } from \"./components/version\";\n\ntype DetailsProps = {\n  data: Payload;\n};\n\nconst Details: React.FunctionComponent<DetailsProps> = ({ data }) => {\n  return (\n    <>\n      <Row gutter={[16, 16]}>\n        <Col flex=\"128px\">\n          <ServerAvatar favicon={data.favicon} />\n        </Col>\n        <Col style={{ textAlign: \"initial\" }}>\n          <Online online={data.online} />\n          <PlayerCount players={data.players} />\n          <Version server={data.server} />\n          <MotD motd={data.motd} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <PlayerList players={data.players} />\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Divider />\n          <Collapse ghost style={{ textAlign: \"initial\" }}>\n            <Collapse.Panel header=\"Raw Data\" key=\"1\">\n              <pre>{JSON.stringify(data, null, 2)}</pre>\n            </Collapse.Panel>\n          </Collapse>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\nimport { Result } from \"antd\";\n\nexport type ErrorProps = {\n  message?: string;\n};\n\nexport default function Error(props: ErrorProps) {\n  return (\n    <Result\n      status=\"error\"\n      title=\"Failed to fetch server details\"\n      subTitle={props.message}\n    />\n  );\n}\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nexport default function Loading() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h2>Loading</h2>\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { addSearch } from \"../server-list/local-servers\";\nimport Details from \"./details\";\nimport Error from \"./error\";\nimport Loading from \"./loading\";\nimport { Payload } from \"./types\";\n\nexport type ServerProps = {\n  address: string;\n};\n\nexport type ServerState = {\n  statusLoaded: boolean;\n  queryLoaded: boolean;\n  statusError?: Error;\n  queryError?: Error;\n  data?: Payload;\n};\n\nconst isObject = (item: any) => {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n};\n\nconst mergePositive = (lhs: any, rhs: any) => {\n  const result = Object.assign({}, lhs);\n\n  Object.keys(rhs).forEach((key) => {\n    const current = result[key];\n    const value = rhs[key];\n\n    if (isObject(value)) {\n      result[key] = mergePositive(current, value);\n      return;\n    }\n\n    if (!current) {\n      result[key] = value;\n      return;\n    }\n  });\n\n  return result;\n};\n\nexport class ServerStatus extends React.Component<ServerProps, ServerState> {\n  constructor(props: ServerProps) {\n    super(props);\n    this.state = { statusLoaded: false, queryLoaded: false };\n  }\n\n  componentDidMount() {\n    fetch(`https://mcapi.us/server/status?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, statusLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ statusError: error, statusLoaded: true });\n        console.error(error);\n      });\n\n    fetch(`https://mcapi.us/server/query?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const toMerge = data?.status === \"success\" ? data : {};\n        const merged = mergePositive(this.state.data, toMerge);\n        this.setState({ data: merged, queryLoaded: true });\n      })\n      .catch((error) => {\n        this.setState({ queryError: error });\n        console.error(error);\n      });\n  }\n\n  render() {\n    const { statusError, queryError, data, statusLoaded, queryLoaded } =\n      this.state;\n\n    if (!statusLoaded && !queryLoaded) {\n      return <Loading />;\n    }\n\n    if (!data || Object.keys(data).length === 0) {\n      if (statusLoaded && queryLoaded) {\n        const errorMsg = [statusError, queryError].filter((e) => e).join(\"/\");\n        return <Error message={errorMsg} />;\n      } else {\n        return <Loading />;\n      }\n    }\n\n    if (data.error || data.status === \"error\") {\n      if (statusLoaded && queryLoaded) {\n        return <Error message={data ? data.error : \"No data found??\"} />;\n      }\n    }\n\n    addSearch({\n      name: data.server?.name || \"Unnamed server\",\n      url: this.props.address,\n    });\n\n    return <Details data={data} key={JSON.stringify(data)} />;\n  }\n}\n","import \"antd/dist/antd.css\";\nimport \"./App.less\";\nimport {\n    Button,\n    Divider,\n    Form,\n    Input,\n    Layout,\n    Typography\n} from \"antd\";\nimport React from \"react\";\nimport ReactGA from \"react-ga4\";\nimport { GlobalOutlined } from \"@ant-design/icons\";\nimport { InfoLinks } from \"./info-links\";\nimport { ServerList } from \"./server-list\";\nimport { ServerStatus } from \"./server-state\";\n\nconst { Header, Footer, Content } = Layout;\nconst { Title } = Typography;\n\ntry {\n  ReactGA.initialize(process.env.REACT_APP_GA_ID || \"\");\n} catch (err) {\n  console.error(\"GA initialization failed\", err);\n}\n\nfunction App() {\n  const params = new URLSearchParams(window.location.search);\n  const paramIp = params.get(\"ip\");\n\n  const onFinish = (values: { ip?: string }) => {\n    if (values.ip) {\n      params.set(\"ip\", values.ip);\n      window.location.search = params.toString();\n    }\n  };\n\n  return (\n    <Layout className=\"app\">\n      <Header className=\"header\">\n        <a href={`${process.env.PUBLIC_URL}`}>\n          <img\n            className=\"logo\"\n            src={`${process.env.PUBLIC_URL}/logo512.png`}\n            alt=\"\"\n          ></img>\n          <h2>Minecraft Server Status</h2>\n        </a>\n      </Header>\n      <Content className=\"content\">\n        <Form\n          style={{ textAlign: \"center\" }}\n          name=\"basic\"\n          layout=\"vertical\"\n          size=\"large\"\n          initialValues={{ ip: paramIp }}\n          onFinish={onFinish}\n        >\n          <Title level={3}>Quickly check your Minecraft server status!</Title>\n          <Form.Item name=\"ip\">\n            <Input prefix={<GlobalOutlined />} placeholder=\"Server IP\" />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{ maxWidth: \"300px\", width: \"100%\" }}\n            >\n              Go!\n            </Button>\n          </Form.Item>\n          <InfoLinks />\n        </Form>\n        <Divider />\n        {!paramIp && <ServerList />}\n        {paramIp && <ServerStatus key={paramIp} address={paramIp} />}\n      </Content>\n      <Footer className=\"footer\">\n        Created by <a href=\"https://samuel-lewis.com\">Samuel Lewis</a>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}