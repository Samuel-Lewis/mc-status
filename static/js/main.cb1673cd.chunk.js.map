{"version":3,"sources":["server-state/loading.tsx","server-state/error.tsx","server-state/components/server-avatar.tsx","server-state/components/online.tsx","server-state/components/player-count.tsx","server-state/server.tsx","app.tsx","index.tsx"],"names":["Loading","style","textAlign","size","Error","props","status","title","subTitle","message","defaultAvatarSrc","process","ServerAvatar","src","shape","Online","Title","level","CheckCircleFilled","color","CloseCircleFilled","PlayerCount","data","now","max","Text","strong","TeamOutlined","ServerStatus","state","loading","fetch","this","address","then","response","json","setState","catch","error","console","online","span","favicon","players","ghost","Panel","header","key","JSON","stringify","React","Component","Header","Layout","Footer","Content","App","params","URLSearchParams","window","location","search","paramIp","get","className","name","layout","initialValues","ip","onFinish","values","set","toString","Item","label","type","htmlType","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb1673cd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spin } from \"antd\";\n\nexport default function Loading() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h2>Loading</h2>\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Result } from \"antd\";\n\nexport type ErrorProps = {\n  message?: string;\n};\n\nexport default function Error(props: ErrorProps) {\n  return (\n    <Result\n      status=\"error\"\n      title=\"Failed to fetch server details\"\n      subTitle={props.message}\n    />\n  );\n}\n","import React from \"react\";\nimport { Avatar } from \"antd\";\n\nconst defaultAvatarSrc = `${process.env.PUBLIC_URL}/grassblock.jpg`;\n\nexport const ServerAvatar = (props: { src?: string }) => {\n  return (\n    <Avatar src={props.src || defaultAvatarSrc} size={128} shape=\"square\" />\n  );\n};\n","import React from \"react\";\n\nimport { Typography } from \"antd\";\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\n\nexport const Online = (props: { status?: boolean }) => {\n  if (!!props.status) {\n    return (\n      <Typography.Title level={3}>\n        <CheckCircleFilled style={{ color: \"green\" }} /> Online!\n      </Typography.Title>\n    );\n  }\n\n  return (\n    <Typography.Title level={3}>\n      <CloseCircleFilled style={{ color: \"darkred\" }} /> Offline\n    </Typography.Title>\n  );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { TeamOutlined } from \"@ant-design/icons\";\n\nexport const PlayerCount = (props: {\n  data?: { now?: number; max?: number };\n}) => {\n  if (!props.data) {\n    return null;\n  }\n\n  const { now, max } = props.data;\n  return (\n    <Typography.Text strong>\n      <TeamOutlined /> {now} / {max} player{now === 1 ? \"\" : \"s\"} online\n    </Typography.Text>\n  );\n};\n","import React from \"react\";\nimport { Collapse, Row, Col, Divider } from \"antd\";\n\nimport Loading from \"./loading\";\nimport Error from \"./error\";\n\nimport { ServerAvatar } from \"./components/server-avatar\";\nimport { Online } from \"./components/online\";\nimport { PlayerCount } from \"./components/player-count\";\n\nexport type Payload = {\n  status: string;\n  online: boolean;\n  error?: string;\n  motd?: string;\n  favicon?: string;\n  version?: string;\n  game_type?: string;\n  game_id?: any;\n  server_mod?: string;\n  map?: any;\n  players?: {\n    max?: number;\n    now?: number;\n    list?: any[];\n  };\n  plugins?: any[];\n  last_online?: string;\n  last_updated?: string;\n  duration?: number;\n};\n\nexport type ServerProps = {\n  address: string;\n};\n\nexport type ServerState = {\n  loading: boolean;\n  data?: Payload;\n  error?: Error;\n};\n\nexport class ServerStatus extends React.Component<ServerProps, ServerState> {\n  constructor(props: ServerProps) {\n    super(props);\n    this.state = { loading: true };\n  }\n\n  componentDidMount() {\n    fetch(`https://mcapi.us/server/status?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (!this.state.data) {\n          this.setState({ data, loading: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ error, loading: false });\n        console.error(error);\n      });\n\n    fetch(`https://mcapi.us/server/query?ip=${this.props.address}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.online) {\n          this.setState({ data, loading: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ error, loading: false });\n        console.error(error);\n      });\n  }\n\n  render() {\n    const { loading, data, error } = this.state;\n    if (error) {\n      return <Error message={error.message} />;\n    }\n\n    if (loading) {\n      return <Loading />;\n    }\n\n    if (!data || data.error || data.status === \"error\") {\n      return <Error message={data ? data.error : \"No data found??\"} />;\n    }\n\n    return (\n      <>\n        <Row>\n          <Col span={6}>\n            <ServerAvatar src={data.favicon} />\n          </Col>\n          <Col span={18} style={{ textAlign: \"initial\" }}>\n            <Online status={data.online} />\n            <PlayerCount data={data.players} />\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Divider />\n            <Collapse ghost style={{ textAlign: \"initial\" }}>\n              <Collapse.Panel header=\"Raw Data\" key=\"1\">\n                <pre>{JSON.stringify(data, null, 2)}</pre>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { ServerStatus } from \"./server-state/server\";\nimport { Typography, Button, Layout, Form, Input, Divider } from \"antd\";\n\nimport \"antd/dist/antd.css\";\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  const params = new URLSearchParams(window.location.search);\n  const paramIp = params.get(\"ip\");\n\n  const onFinish = (values: { ip?: string }) => {\n    if (values.ip) {\n      params.set(\"ip\", values.ip);\n      window.location.search = params.toString();\n    }\n  };\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Typography.Title>Minecraft Server Status</Typography.Title>\n      </Header>\n      <Content className=\"layout-content\">\n        <Form\n          name=\"basic\"\n          layout=\"vertical\"\n          size=\"large\"\n          initialValues={{ ip: paramIp }}\n          onFinish={onFinish}\n        >\n          <Form.Item label=\"Server IP\" name=\"ip\">\n            <Input />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Go!\n            </Button>\n          </Form.Item>\n        </Form>\n\n        <Divider />\n\n        {paramIp && <ServerStatus key={paramIp} address={paramIp} />}\n      </Content>\n      <Footer className=\"layout-footer\">\n        Created by Samuel Lewis |{\" \"}\n        <a href=\"https://github.com/Samuel-Lewis\">GitHub</a>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}