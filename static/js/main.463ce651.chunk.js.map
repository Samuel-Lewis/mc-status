{"version":3,"sources":["server-state/status.tsx","server-state/loading.tsx","server-state/error.tsx","server.tsx","app.tsx","index.tsx"],"names":["Status","JSON","stringify","this","props","data","React","Component","Loading","Error","error","ServerStatus","state","loading","fetch","address","then","response","json","setState","catch","err","console","online","App","ip","URLSearchParams","window","location","search","get","className","href","type","name","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA4BqBA,E,uKAEjB,OACE,oCACE,qCACA,6BACGC,KAAKC,UAAUC,KAAKC,MAAMC,KAAM,KAAM,S,GANbC,IAAMC,WC1B3B,SAASC,IACtB,OACE,yC,ICDiBC,E,uKAEjB,OAAKN,KAAKC,MAAMC,KAOd,6BACGF,KAAKC,MAAMC,KAAKK,OANjB,6C,GAJ2BV,GCYtBW,EAAb,kDACE,WAAYP,GAAqB,IAAD,8BAC9B,cAAMA,IACDQ,MAAQ,CAAEC,SAAS,GAFM,EADlC,gEAMuB,IAAD,OAClBC,MAAM,qCAAD,OAAsCX,KAAKC,MAAMW,UACnDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAX,GACC,EAAKO,MAAMP,MACd,EAAKc,SAAS,CAAEd,OAAMQ,SAAS,OAGlCO,OAAM,SAAAC,GAAG,OAAIC,QAAQZ,MAAMW,MAE9BP,MAAM,oCAAD,OAAqCX,KAAKC,MAAMW,UAClDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAX,GACAA,EAAKkB,QACP,EAAKJ,SAAS,CAAEd,OAAMQ,SAAS,OAGlCO,OAAM,SAAAC,GAAG,OAAIC,QAAQZ,MAAMW,QAvBlC,+BA0BY,IAAD,EACmBlB,KAAKS,MAAvBC,EADD,EACCA,QAASR,EADV,EACUA,KAEjB,OAAIQ,EACK,kBAACL,EAAD,MAGLH,GAAQA,EAAKkB,OACR,kBAAC,EAAD,CAAQlB,KAAMA,IAGhB,kBAAC,EAAD,CAAOA,KAAMA,QArCxB,GAAkCC,IAAMC,WCczBiB,MAzBf,WAEE,IACMC,EADS,IAAIC,gBAAgBC,OAAOC,SAASC,QACjCC,IAAI,MAGtB,OACE,yBAAKC,UAAU,OACb,uBAAGC,KAAK,KAAR,QAEA,8BACE,6CACa,2BAAOC,KAAK,OAAOC,KAAK,QAErC,2BAAOD,KAAK,SAASE,MAAM,YAG5BV,GAAM,kBAAC,EAAD,CACLV,QAASU,MCjBjBW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.463ce651.chunk.js","sourcesContent":["import React from 'react';\n\nexport type Payload = {\n  status?: string,\n  online?: boolean,\n  error?: string,\n  motd?: string,\n  version?: string,\n  game_type?: string,\n  game_id?: any,\n  server_mod?: string,\n  map?: any,\n  players?: {\n    max?: number,\n    now?: number,\n    list?: any[]\n  },\n  plugins?: any[],\n  last_online?: string,\n  last_updated?: string,\n  duration?: number\n}\n\n\nexport type StatusProps = {\n  data?: Payload\n}\n\nexport default class Status extends React.Component<StatusProps> {\n  render() {\n    return (\n      <>\n        <h1>Base!</h1>\n        <pre>\n          {JSON.stringify(this.props.data, null, 2)}\n        </pre >\n      </>\n    )\n  }\n}","import React from 'react';\n\nexport default function Loading() {\n  return (\n    <div>\n      Loading!\n    </div>\n  )\n}","import React from 'react';\nimport Status from './status'\n\nexport default class Error extends Status {\n  render() {\n    if (!this.props.data) {\n      return (\n        <div>Loading!</div>\n      )\n    }\n\n    return (\n      <pre>\n        {this.props.data.error}\n      </pre>\n    )\n  }\n}","import React from 'react';\n\nimport Status, { Payload } from './server-state/status';\nimport Loading from './server-state/loading';\nimport Error from './server-state/error';\n\nexport type ServerProps = {\n  address: string\n}\n\nexport type ServerState = {\n  loading: boolean,\n  data?: Payload,\n}\n\nexport class ServerStatus extends React.Component<ServerProps, ServerState> {\n  constructor(props: ServerProps) {\n    super(props);\n    this.state = { loading: true }\n  }\n\n  componentDidMount() {\n    fetch(`https://mcapi.us/server/status?ip=${this.props.address}`)\n      .then(response => response.json())\n      .then(data => {\n        if (!this.state.data) {\n          this.setState({ data, loading: false })\n        }\n      })\n      .catch(err => console.error(err));\n\n    fetch(`https://mcapi.us/server/query?ip=${this.props.address}`)\n      .then(response => response.json())\n      .then(data => {\n        if (data.online) {\n          this.setState({ data, loading: false })\n        }\n      })\n      .catch(err => console.error(err));\n  }\n\n  render() {\n    const { loading, data } = this.state;\n\n    if (loading) {\n      return <Loading />\n    }\n\n    if (data && data.online) {\n      return <Status data={data} />\n    }\n\n    return <Error data={data} />\n  }\n}","import React from 'react';\nimport './App.css';\nimport { ServerStatus } from './server'\n\nfunction App() {\n\n  const params = new URLSearchParams(window.location.search);\n  const ip = params.get('ip');\n\n\n  return (\n    <div className=\"App\">\n      <a href=\"/\">Home</a>\n\n      <form>\n        <label>\n          Server IP: <input type=\"text\" name=\"ip\" />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n\n      {ip && <ServerStatus\n        address={ip}\n      />}\n\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}